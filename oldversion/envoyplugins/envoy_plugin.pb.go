// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: networking/v1alpha3/envoy_plugin.proto

package netease

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type EnvoyPlugin struct {
	WorkloadLabels map[string]string `protobuf:"bytes,9,rep,name=workload_labels,json=workloadLabels,proto3" json:"workload_labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// route level plugin
	Route []string `protobuf:"bytes,1,rep,name=route,proto3" json:"route,omitempty"`
	// host level plugin
	Host []string `protobuf:"bytes,2,rep,name=host,proto3" json:"host,omitempty"`
	// service level plugin
	Service []string  `protobuf:"bytes,3,rep,name=service,proto3" json:"service,omitempty"`
	Plugins []*Plugin `protobuf:"bytes,4,rep,name=plugins,proto3" json:"plugins,omitempty"`
	// which gateway should use this plugin setting
	Gateway []string `protobuf:"bytes,5,rep,name=gateway,proto3" json:"gateway,omitempty"`
	// which user should use this plugin setting
	User []string `protobuf:"bytes,6,rep,name=user,proto3" json:"user,omitempty"`
	// group setting 用于路由组级别的配置设置，其优先级低于路由级别的配置
	IsGroupSetting bool `protobuf:"varint,7,opt,name=isGroupSetting,proto3" json:"isGroupSetting,omitempty"`
	// listener level
	Listener             []*EnvoyPlugin_Listener `protobuf:"bytes,8,rep,name=listener,proto3" json:"listener,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *EnvoyPlugin) Reset()         { *m = EnvoyPlugin{} }
func (m *EnvoyPlugin) String() string { return proto.CompactTextString(m) }
func (*EnvoyPlugin) ProtoMessage()    {}
func (*EnvoyPlugin) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d75cfd742f91d57, []int{0}
}
func (m *EnvoyPlugin) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EnvoyPlugin) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EnvoyPlugin.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EnvoyPlugin) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EnvoyPlugin.Merge(m, src)
}
func (m *EnvoyPlugin) XXX_Size() int {
	return m.Size()
}
func (m *EnvoyPlugin) XXX_DiscardUnknown() {
	xxx_messageInfo_EnvoyPlugin.DiscardUnknown(m)
}

var xxx_messageInfo_EnvoyPlugin proto.InternalMessageInfo

func (m *EnvoyPlugin) GetWorkloadLabels() map[string]string {
	if m != nil {
		return m.WorkloadLabels
	}
	return nil
}

func (m *EnvoyPlugin) GetRoute() []string {
	if m != nil {
		return m.Route
	}
	return nil
}

func (m *EnvoyPlugin) GetHost() []string {
	if m != nil {
		return m.Host
	}
	return nil
}

func (m *EnvoyPlugin) GetService() []string {
	if m != nil {
		return m.Service
	}
	return nil
}

func (m *EnvoyPlugin) GetPlugins() []*Plugin {
	if m != nil {
		return m.Plugins
	}
	return nil
}

func (m *EnvoyPlugin) GetGateway() []string {
	if m != nil {
		return m.Gateway
	}
	return nil
}

func (m *EnvoyPlugin) GetUser() []string {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *EnvoyPlugin) GetIsGroupSetting() bool {
	if m != nil {
		return m.IsGroupSetting
	}
	return false
}

func (m *EnvoyPlugin) GetListener() []*EnvoyPlugin_Listener {
	if m != nil {
		return m.Listener
	}
	return nil
}

type EnvoyPlugin_Listener struct {
	Port                 uint32   `protobuf:"varint,1,opt,name=port,proto3" json:"port,omitempty"`
	Outbound             bool     `protobuf:"varint,2,opt,name=outbound,proto3" json:"outbound,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EnvoyPlugin_Listener) Reset()         { *m = EnvoyPlugin_Listener{} }
func (m *EnvoyPlugin_Listener) String() string { return proto.CompactTextString(m) }
func (*EnvoyPlugin_Listener) ProtoMessage()    {}
func (*EnvoyPlugin_Listener) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d75cfd742f91d57, []int{0, 1}
}
func (m *EnvoyPlugin_Listener) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EnvoyPlugin_Listener) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EnvoyPlugin_Listener.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EnvoyPlugin_Listener) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EnvoyPlugin_Listener.Merge(m, src)
}
func (m *EnvoyPlugin_Listener) XXX_Size() int {
	return m.Size()
}
func (m *EnvoyPlugin_Listener) XXX_DiscardUnknown() {
	xxx_messageInfo_EnvoyPlugin_Listener.DiscardUnknown(m)
}

var xxx_messageInfo_EnvoyPlugin_Listener proto.InternalMessageInfo

func (m *EnvoyPlugin_Listener) GetPort() uint32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *EnvoyPlugin_Listener) GetOutbound() bool {
	if m != nil {
		return m.Outbound
	}
	return false
}

func init() {
	proto.RegisterType((*EnvoyPlugin)(nil), "istio.networking.v1alpha3.EnvoyPlugin")
	proto.RegisterMapType((map[string]string)(nil), "istio.networking.v1alpha3.EnvoyPlugin.WorkloadLabelsEntry")
	proto.RegisterType((*EnvoyPlugin_Listener)(nil), "istio.networking.v1alpha3.EnvoyPlugin.Listener")
}

func init() {
	proto.RegisterFile("networking/v1alpha3/envoy_plugin.proto", fileDescriptor_6d75cfd742f91d57)
}

var fileDescriptor_6d75cfd742f91d57 = []byte{
	// 390 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x52, 0xcd, 0x8e, 0xd3, 0x30,
	0x18, 0x94, 0x9b, 0xfe, 0xa4, 0xae, 0x28, 0xc8, 0x70, 0x30, 0x39, 0x54, 0x81, 0x43, 0xc9, 0x29,
	0x11, 0xf4, 0x82, 0xca, 0x09, 0xa4, 0x8a, 0x03, 0x3d, 0x20, 0x73, 0x40, 0xe2, 0x52, 0xb9, 0xad,
	0x95, 0x5a, 0x0d, 0x76, 0x64, 0x3b, 0xa9, 0xf2, 0x20, 0xbc, 0x13, 0xc7, 0x7d, 0x84, 0x55, 0x9f,
	0x64, 0x65, 0xbb, 0xe9, 0xfe, 0xa8, 0xbb, 0xda, 0xdb, 0xcc, 0xc4, 0x33, 0x99, 0xef, 0xd3, 0x07,
	0xa7, 0x82, 0x99, 0x83, 0x54, 0x7b, 0x2e, 0xf2, 0xac, 0xfe, 0x48, 0x8b, 0x72, 0x47, 0x67, 0x19,
	0x13, 0xb5, 0x6c, 0x56, 0x65, 0x51, 0xe5, 0x5c, 0xa4, 0xa5, 0x92, 0x46, 0xa2, 0xb7, 0x5c, 0x1b,
	0x2e, 0xd3, 0xdb, 0xd7, 0x69, 0xfb, 0x3a, 0xfa, 0x70, 0x29, 0xc2, 0x9b, 0xff, 0x52, 0x41, 0x73,
	0xa6, 0x7c, 0xc6, 0xfb, 0x7f, 0x5d, 0x38, 0x5a, 0xd8, 0xe8, 0x9f, 0xee, 0x23, 0xda, 0xc0, 0x97,
	0xd6, 0x57, 0x48, 0xba, 0x5d, 0x15, 0x74, 0xcd, 0x0a, 0x8d, 0x87, 0x71, 0x90, 0x8c, 0x3e, 0xcd,
	0xd3, 0x47, 0xff, 0x96, 0xde, 0x09, 0x48, 0x7f, 0x9f, 0xdc, 0x4b, 0x67, 0x5e, 0x08, 0xa3, 0x1a,
	0x32, 0x3e, 0xdc, 0x13, 0xd1, 0x1b, 0xd8, 0x53, 0xb2, 0x32, 0x0c, 0x83, 0x38, 0x48, 0x86, 0xc4,
	0x13, 0x84, 0x60, 0x77, 0x27, 0xb5, 0xc1, 0x1d, 0x27, 0x3a, 0x8c, 0x30, 0x1c, 0x68, 0xa6, 0x6a,
	0xbe, 0x61, 0x38, 0x70, 0x72, 0x4b, 0xd1, 0x17, 0x38, 0xf0, 0xf3, 0x68, 0xdc, 0x75, 0x05, 0xdf,
	0x3d, 0x51, 0xd0, 0x77, 0x23, 0xad, 0xc3, 0xc6, 0xe6, 0xd4, 0xb0, 0x03, 0x6d, 0x70, 0xcf, 0xc7,
	0x9e, 0xa8, 0x2d, 0x51, 0x69, 0xa6, 0x70, 0xdf, 0x97, 0xb0, 0x18, 0x4d, 0xe1, 0x98, 0xeb, 0xef,
	0x4a, 0x56, 0xe5, 0x2f, 0x66, 0x0c, 0x17, 0x39, 0x1e, 0xc4, 0x20, 0x09, 0xc9, 0x03, 0x15, 0xfd,
	0x80, 0x61, 0xc1, 0xb5, 0x61, 0x82, 0x29, 0x1c, 0xba, 0x4e, 0xd9, 0x33, 0x97, 0xb6, 0x3c, 0xd9,
	0xc8, 0x39, 0x20, 0xfa, 0x0a, 0x5f, 0x5f, 0x58, 0x25, 0x7a, 0x05, 0x83, 0x3d, 0x6b, 0x30, 0x88,
	0x41, 0x32, 0x24, 0x16, 0xda, 0x65, 0xd6, 0xb4, 0xa8, 0x18, 0xee, 0x38, 0xcd, 0x93, 0x79, 0xe7,
	0x33, 0x88, 0xe6, 0x30, 0x6c, 0x83, 0xed, 0x5c, 0xa5, 0x54, 0xc6, 0x19, 0x5f, 0x10, 0x87, 0x51,
	0x04, 0x43, 0x59, 0x99, 0xb5, 0xac, 0xc4, 0xd6, 0x99, 0x43, 0x72, 0xe6, 0xdf, 0xd2, 0xff, 0xc7,
	0x09, 0xb8, 0x3a, 0x4e, 0xc0, 0xf5, 0x71, 0x02, 0xfe, 0xc4, 0x7e, 0x0c, 0x2e, 0x33, 0x5a, 0xf2,
	0xec, 0xc2, 0x6d, 0xad, 0xfb, 0xee, 0x9c, 0x66, 0x37, 0x01, 0x00, 0x00, 0xff, 0xff, 0x45, 0xaf,
	0xa2, 0xb6, 0xbc, 0x02, 0x00, 0x00,
}

func (m *EnvoyPlugin) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EnvoyPlugin) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EnvoyPlugin) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.WorkloadLabels) > 0 {
		for k := range m.WorkloadLabels {
			v := m.WorkloadLabels[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintEnvoyPlugin(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintEnvoyPlugin(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintEnvoyPlugin(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x4a
		}
	}
	if len(m.Listener) > 0 {
		for iNdEx := len(m.Listener) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Listener[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEnvoyPlugin(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if m.IsGroupSetting {
		i--
		if m.IsGroupSetting {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if len(m.User) > 0 {
		for iNdEx := len(m.User) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.User[iNdEx])
			copy(dAtA[i:], m.User[iNdEx])
			i = encodeVarintEnvoyPlugin(dAtA, i, uint64(len(m.User[iNdEx])))
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.Gateway) > 0 {
		for iNdEx := len(m.Gateway) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Gateway[iNdEx])
			copy(dAtA[i:], m.Gateway[iNdEx])
			i = encodeVarintEnvoyPlugin(dAtA, i, uint64(len(m.Gateway[iNdEx])))
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Plugins) > 0 {
		for iNdEx := len(m.Plugins) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Plugins[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEnvoyPlugin(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Service) > 0 {
		for iNdEx := len(m.Service) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Service[iNdEx])
			copy(dAtA[i:], m.Service[iNdEx])
			i = encodeVarintEnvoyPlugin(dAtA, i, uint64(len(m.Service[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Host) > 0 {
		for iNdEx := len(m.Host) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Host[iNdEx])
			copy(dAtA[i:], m.Host[iNdEx])
			i = encodeVarintEnvoyPlugin(dAtA, i, uint64(len(m.Host[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Route) > 0 {
		for iNdEx := len(m.Route) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Route[iNdEx])
			copy(dAtA[i:], m.Route[iNdEx])
			i = encodeVarintEnvoyPlugin(dAtA, i, uint64(len(m.Route[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *EnvoyPlugin_Listener) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EnvoyPlugin_Listener) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EnvoyPlugin_Listener) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Outbound {
		i--
		if m.Outbound {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.Port != 0 {
		i = encodeVarintEnvoyPlugin(dAtA, i, uint64(m.Port))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintEnvoyPlugin(dAtA []byte, offset int, v uint64) int {
	offset -= sovEnvoyPlugin(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *EnvoyPlugin) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Route) > 0 {
		for _, s := range m.Route {
			l = len(s)
			n += 1 + l + sovEnvoyPlugin(uint64(l))
		}
	}
	if len(m.Host) > 0 {
		for _, s := range m.Host {
			l = len(s)
			n += 1 + l + sovEnvoyPlugin(uint64(l))
		}
	}
	if len(m.Service) > 0 {
		for _, s := range m.Service {
			l = len(s)
			n += 1 + l + sovEnvoyPlugin(uint64(l))
		}
	}
	if len(m.Plugins) > 0 {
		for _, e := range m.Plugins {
			l = e.Size()
			n += 1 + l + sovEnvoyPlugin(uint64(l))
		}
	}
	if len(m.Gateway) > 0 {
		for _, s := range m.Gateway {
			l = len(s)
			n += 1 + l + sovEnvoyPlugin(uint64(l))
		}
	}
	if len(m.User) > 0 {
		for _, s := range m.User {
			l = len(s)
			n += 1 + l + sovEnvoyPlugin(uint64(l))
		}
	}
	if m.IsGroupSetting {
		n += 2
	}
	if len(m.Listener) > 0 {
		for _, e := range m.Listener {
			l = e.Size()
			n += 1 + l + sovEnvoyPlugin(uint64(l))
		}
	}
	if len(m.WorkloadLabels) > 0 {
		for k, v := range m.WorkloadLabels {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovEnvoyPlugin(uint64(len(k))) + 1 + len(v) + sovEnvoyPlugin(uint64(len(v)))
			n += mapEntrySize + 1 + sovEnvoyPlugin(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *EnvoyPlugin_Listener) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Port != 0 {
		n += 1 + sovEnvoyPlugin(uint64(m.Port))
	}
	if m.Outbound {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovEnvoyPlugin(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEnvoyPlugin(x uint64) (n int) {
	return sovEnvoyPlugin(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EnvoyPlugin) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEnvoyPlugin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EnvoyPlugin: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EnvoyPlugin: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Route", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEnvoyPlugin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEnvoyPlugin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEnvoyPlugin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Route = append(m.Route, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Host", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEnvoyPlugin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEnvoyPlugin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEnvoyPlugin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Host = append(m.Host, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Service", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEnvoyPlugin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEnvoyPlugin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEnvoyPlugin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Service = append(m.Service, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Plugins", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEnvoyPlugin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEnvoyPlugin
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEnvoyPlugin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Plugins = append(m.Plugins, &Plugin{})
			if err := m.Plugins[len(m.Plugins)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gateway", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEnvoyPlugin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEnvoyPlugin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEnvoyPlugin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Gateway = append(m.Gateway, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEnvoyPlugin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEnvoyPlugin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEnvoyPlugin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.User = append(m.User, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsGroupSetting", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEnvoyPlugin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsGroupSetting = bool(v != 0)
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Listener", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEnvoyPlugin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEnvoyPlugin
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEnvoyPlugin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Listener = append(m.Listener, &EnvoyPlugin_Listener{})
			if err := m.Listener[len(m.Listener)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkloadLabels", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEnvoyPlugin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEnvoyPlugin
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEnvoyPlugin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WorkloadLabels == nil {
				m.WorkloadLabels = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowEnvoyPlugin
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowEnvoyPlugin
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthEnvoyPlugin
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthEnvoyPlugin
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowEnvoyPlugin
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthEnvoyPlugin
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthEnvoyPlugin
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipEnvoyPlugin(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthEnvoyPlugin
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.WorkloadLabels[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEnvoyPlugin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEnvoyPlugin
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEnvoyPlugin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EnvoyPlugin_Listener) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEnvoyPlugin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Listener: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Listener: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			m.Port = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEnvoyPlugin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Port |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Outbound", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEnvoyPlugin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Outbound = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipEnvoyPlugin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEnvoyPlugin
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEnvoyPlugin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEnvoyPlugin(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEnvoyPlugin
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEnvoyPlugin
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEnvoyPlugin
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEnvoyPlugin
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthEnvoyPlugin
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowEnvoyPlugin
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipEnvoyPlugin(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthEnvoyPlugin
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthEnvoyPlugin = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEnvoyPlugin   = fmt.Errorf("proto: integer overflow")
)
