syntax = "proto3";

package envoy.config.filter.http.local_flow_control.v2;

option java_package = "io.envoyproxy.envoy.config.filter.http.local_flow_control.v2";
option java_outer_classname = "LocalFlowControlProto";
option java_multiple_files = true;

option go_package = "yun.netease.com/slime/pkg/apis/microservice/v1alpha1";

// 单机限流： 插件名称: com.netease.local_flow_control
// 功能：支持服务级别、路由级别限流配置，
// 限流配置服务级别、路由级别的配置： 复用http ratelimit 全局限流插件相关配置
// Ref:
// https://g.hz.netease.com/qingzhou/envoy-function-instructions/blob/master/%E7%BD%91%E5%85%B3%E6%95%B0%E6%8D%AE%E9%9D%A2%E5%BC%80%E5%8F%91.md#141-%E5%85%A8%E5%B1%80%E9%99%90%E6%B5%81%E5%88%86%E5%B8%83%E5%BC%8F%E9%99%90%E6%B5%81
//
// FlowControl config 参考全局限流配置： https://g.hz.netease.com/qingzhou/ratelimit/blob/master/proto/ratelimit/config.proto
// Example 如下：
// ---
// domain: backend
// descriptors:
//   - key: generic_key
//     value: default
//     rate_limit:
//       unit: MINUTE
//       requests_per_unit: 1
//   - key: generic_key
//     value: slowpath
//     rate_limit:
//       requests_per_unit: 1099
//       unit: second
//   - key: ratelimitkey
//     descriptors:
//       - key: path
//         rate_limit:
//           requests_per_unit: 100
//           unit: second
//
//  单机限流配置: 一个Listener 只需配置一个domain 即可； 默认stage = 0

enum UnitType {
    UNKNOWN = 0;
    SECOND = 1;
    MINUTE = 2;
    HOUR = 3;
    DAY = 4;
}

message RateConfig {
    UnitType unit = 1;
    uint32 requests_per_unit = 2;
}

message RateLimitDescriptorConfigStatus {
    string key = 1;
    string value = 2;
    RateConfig rate_limit = 3;
    repeated RateLimitDescriptorConfigStatus descriptors = 4;
}

message RateLimitConfStatus {
    string domain = 1;
    repeated RateLimitDescriptorConfigStatus descriptors = 2;
}

message FlowControlConfStatus {
    //限流算法
    enum LimitAlgorithm {
        TokenBucket = 0; //令牌桶
        SlidingWindow = 1; //滑动窗口
    }
    RateLimitConfStatus rate_limit_conf = 1;
    LimitAlgorithm algorithm = 2;
    //计数器可使用最大内存限制,单位：Mbytes
    uint64 max_memory_size = 3;
}

message FlowControlConfSpec {
    enum LimitAlgorithm {
        TokenBucket = 0; //令牌桶
        SlidingWindow = 1; //滑动窗口
    }
    RateLimitConfSpec rate_limit_conf = 1;
    LimitAlgorithm algorithm = 2;
    //计数器可使用最大内存限制,单位：Mbytes
    uint64 max_memory_size = 3;
}

message RateLimitDescriptorConfigSpec {
    string key = 1;
    string value = 2;

    repeated RateLimitDescriptorConfigSpec descriptors = 4;
    string when = 6;
    string then = 7;
    UnitType unit = 8;
}

message RateLimitConfSpec {
    string domain = 1;
    repeated RateLimitDescriptorConfigSpec descriptors = 2;
}
